import math  # –º–æ–¥—É–ª—å –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ to_sea_level_pressure)
import pandas as pd  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
import psycopg2  # –º–æ–¥—É–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
from sqlalchemy import create_engine  # SQLAlchemy –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —á–µ—Ä–µ–∑ pandas
from zambretti_py import PressureData, Zambretti  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ó–∞–º–±—Ä–µ—Ç—Ç–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
from datetime import datetime, timedelta  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
from telegram import Update  # –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
from telegram.ext import (ApplicationBuilder, CommandHandler, ContextTypes)  # —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ Telegram Bot API
import matplotlib.pyplot as plt  # –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
import matplotlib.dates as mdates  # —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Å–∏ –≥—Ä–∞—Ñ–∏–∫–∞
import io  # –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
DB_CONFIG = { 
             "dbname":"YOU_DB_NAME",
             "user":"YOU_USER",
             "password":"YOU_PASSWORD",
             "host":"localhost",
             "port":5432 
             }
ALTITUDE_M = 456  # –º ‚Äî –≤—ã—Å–æ—Ç–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –º–æ—Ä—è
WINDOW_HOURS = 3  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQL Alchemy:
engine = create_engine(
        f"postgresql+psycopg2://{DB_CONFIG['user']}:{DB_CONFIG['password']}@{DB_CONFIG['host']}:{DB_CONFIG['port']}/{DB_CONFIG['dbname']}"
        )

def get_pressure_history(hours=WINDOW_HOURS):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∞–≤–ª–µ–Ω–∏—è –∏ —É–ª–∏—á–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞
    df = pd.read_sql(f"""
      SELECT created_at, pressure_hpa, outdoor_temp
      FROM weather_data
      WHERE created_at >= NOW() - INTERVAL '{hours} hours'
      ORDER BY created_at
    """, con=engine)
    return df

def to_sea_level_pressure(p_hpa, temp_c):
    # –ü–µ—Ä–µ–≤–æ–¥ –¥–∞–≤–ª–µ–Ω–∏—è –∫ —É—Ä–æ–≤–Ω—é –º–æ—Ä—è ‚Äî –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–ª—É—á–∞–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ –ª–æ–≥–∏–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    p_pa = p_hpa * 100.0
    g = 9.80665
    R_d = 287.05
    T_k = temp_c + 273.15
    p0 = p_pa * math.exp((g * ALTITUDE_M) / (R_d * T_k))
    return p0 / 100.0

async def periodic_job(context: ContextTypes.DEFAULT_TYPE):
    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞: –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø–æ –ó–∞–º–±—Ä–µ—Ç—Ç–∏
    df = get_pressure_history(hours=WINDOW_HOURS * 2)
    if df.shape[0] < 6:
        return

    readings = list(zip(df['created_at'], df['pressure_hpa']))  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ –ë–ï–ó –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –∫ –º–æ—Ä—é
    pd_data = PressureData(readings)  # —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç PressureData
    z = Zambretti()  # —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
    last_temp = df['outdoor_temp'].iloc[-1]  # –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    forecast = z.forecast(elevation=ALTITUDE_M, temperature=last_temp, pressure_data=pd_data)  # –ø—Ä–æ–≥–Ω–æ–∑

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –≤ –ë–î
    conn = psycopg2.connect(**DB_CONFIG)
    with conn:
        with conn.cursor() as cur:
            cur.execute("INSERT INTO weather_forecast (forecast) VALUES (%s)", (forecast,))
    conn.close()

# Telegram-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞:
async def cmd_forecast(update, ctx):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
    conn = psycopg2.connect(**DB_CONFIG)
    with conn:
        with conn.cursor() as cur:
            cur.execute("SELECT forecast FROM weather_forecast ORDER BY id DESC LIMIT 1")
            row = cur.fetchone()
    conn.close()
    await update.message.reply_text(row[0] if row else "–ü—Ä–æ–≥–Ω–æ–∑ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤.")

# Telegram-–∫–æ–º–∞–Ω–¥–∞ /weather ‚Äî —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã
async def cmd_weather(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    df = pd.read_sql(f"""
        SELECT created_at, outdoor_temp, pressure_hpa, pressure_mmhg
        FROM weather_data
        ORDER BY created_at DESC
        LIMIT 1
    """, con=engine)
    if df.empty:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.")
        return

    ts, temp, p_hpa, p_mmhg = df.iloc[0]
    p_sea = to_sea_level_pressure(p_hpa, temp)  # —Ä–∞—Å—á—ë—Ç –¥–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ—Ä—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ª–æ–≥–∏–∫–µ)

    text = (
            f"üìÖ {ts:%Y-%m-%d %H:%M}\n"  # —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬†¬∞C\n"
            f"üìà –î–∞–≤–ª–µ–Ω–∏–µ: {p_hpa:.1f}¬†–≥–ü–∞\n"
            f"üìà –î–∞–≤–ª–µ–Ω–∏–µ: {p_mmhg:.1f}¬†–º–º¬†—Ä—Ç.¬†—Å—Ç."
            )
    await update.message.reply_text(text)

# Telegram-–∫–æ–º–∞–Ω–¥–∞ /pressure ‚Äî –≥—Ä–∞—Ñ–∏–∫ –¥–∞–≤–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞
async def cmd_pressure(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    df = get_pressure_history(hours=WINDOW_HOURS)
    if df.empty:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞.")
        return

    fig, ax = plt.subplots()
    ax.plot(df['created_at'], df['pressure_hpa'], marker='o')  # –≥—Ä–∞—Ñ–∏–∫ –¥–∞–≤–ª–µ–Ω–∏—è
    ax.grid()
    formatter = mdates.DateFormatter('%H:%M')  # —Ñ–æ—Ä–º–∞—Ç –æ—Å–∏ –≤—Ä–µ–º–µ–Ω–∏
    ax.xaxis.set_major_formatter(formatter)
    fig.autofmt_xdate()

    delta = df['pressure_hpa'].iloc[-1] - df['pressure_hpa'].iloc[0]  # —Ä–∞–∑–Ω–∏—Ü–∞ –¥–∞–≤–ª–µ–Ω–∏—è

    buf = io.BytesIO()
    fig.savefig(buf, format='png')
    buf.seek(0)
    buf.name = 'pressure.png'
    plt.close(fig)

    await update.message.reply_photo(buf, caption=f"üìà –î–∞–≤–ª–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞\nŒî = {delta:.1f} –≥–ü–∞\n{p_hpa:.1f} –≥–ü–∞")

# Telegram-–∫–æ–º–∞–Ω–¥–∞ /forecast_now ‚Äî —Ä–∞—Å—á—ë—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
async def cmd_forecast_now(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    df = get_pressure_history(hours=WINDOW_HOURS * 2)  # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤
    if df.shape[0] < 6:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–Ω—É–∂–Ω–æ ‚â•6 —Ç–æ—á–µ–∫).")
        return

    readings = list(zip(df['created_at'], df['pressure_hpa']))  # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ (–≤—Ä–µ–º—è, –¥–∞–≤–ª–µ–Ω–∏–µ)
    pd_data = PressureData(readings)  # –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è zambretti_py
    z = Zambretti()  # –æ–±—ä–µ–∫—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
    last_temp = df['outdoor_temp'].iloc[-1]  # –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    forecast = z.forecast(elevation=ALTITUDE_M, temperature=last_temp, pressure_data=pd_data)  # —Ä–∞—Å—á—ë—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞

    await update.message.reply_text(f"üå§ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è: {forecast}")  # –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram

def main():
    # –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞
    app = ApplicationBuilder().token("XXXXXXXXXX:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").build()
    app.add_handler(CommandHandler("weather", cmd_weather))  # –∫–æ–º–∞–Ω–¥–∞ /weather
    app.add_handler(CommandHandler("forecast", cmd_forecast))  # –∫–æ–º–∞–Ω–¥–∞ /forecast
    app.add_handler(CommandHandler("pressure", cmd_pressure))  # –∫–æ–º–∞–Ω–¥–∞ /pressure
    app.add_handler(CommandHandler("forecast_now", cmd_forecast_now))  # –∫–æ–º–∞–Ω–¥–∞ /forecast_now ‚Äî –ù–û–í–ê–Ø
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º periodic_job –Ω–∞ –∑–∞–ø—É—Å–∫ —Ä–∞–∑ –≤ —á–∞—Å
    interval_seconds = 3600
    app.job_queue.run_repeating(
        periodic_job,
        interval=interval_seconds,
        first=10  # –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å)
    )
    
    app.run_polling()  # –∑–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ Telegram

if __name__ == "__main__":
    main()
